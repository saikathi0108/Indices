#include <iostream>
#include <vector>

class SparseMatrix {
private:
    int rows, cols;
    std::vector<int> row_indices;
    std::vector<int> col_indices;
    std::vector<int> values;

public:
    SparseMatrix(int r, int c) : rows(r), cols(c) {}

    void addElement(int row, int col, int value) {
        if (value != 0) {
            row_indices.push_back(row);
            col_indices.push_back(col);
            values.push_back(value);
        }
    }

    int getElement(int row, int col) {
        for (size_t i = 0; i < values.size(); ++i) {
            if (row_indices[i] == row && col_indices[i] == col) {
                return values[i];
            }
        }
        return 0;
    }

    void display() {
        int sparse_matrix[rows][cols];
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                sparse_matrix[i][j] = 0;
            }
        }

        for (size_t i = 0; i < values.size(); ++i) {
            sparse_matrix[row_indices[i]][col_indices[i]] = values[i];
        }

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << sparse_matrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }

    void displaySparse() {
        std::cout << "Row indices: ";
        for (int row : row_indices) {
            std::cout << row << " ";
        }
        std::cout << std::endl;

        std::cout << "Column indices: ";
        for (int col : col_indices) {
            std::cout << col << " ";
        }
        std::cout << std::endl;

        std::cout << "Values: ";
        for (int value : values) {
            std::cout << value << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    SparseMatrix sparseMatrix(4, 5);

    sparseMatrix.addElement(0, 2, 3);
    sparseMatrix.addElement(0, 4, 4);
    sparseMatrix.addElement(1, 2, 5);
    sparseMatrix.addElement(1, 3, 7);
    sparseMatrix.addElement(3, 1, 2);
    sparseMatrix.addElement(3, 2, 6);

    std::cout << "Sparse Matrix:" << std::endl;
    sparseMatrix.display();

    std::cout << "\nSparse Matrix Representation:" << std::endl;
    sparseMatrix.displaySparse();

    std::cout << "\nElement at (1, 2): " << sparseMatrix.getElement(1, 2) << std::endl;
    std::cout << "Element at (0, 0): " << sparseMatrix.getElement(0, 0) << std::endl;

    return 0;
}
