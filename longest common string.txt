#include <iostream>
#include <string>
#include <vector>
#include <utility>

std::pair<std::string, std::vector<std::vector<int>>> longestCommonSubstring(const std::string& str1, const std::string& str2) {
    int m = str1.length();
    int n = str2.length();
    
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));
    
    int maxLength = 0;
    int endIndex = 0;
    
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > maxLength) {
                    maxLength = dp[i][j];
                    endIndex = i - 1;
                }
            }
        }
    }
    
    std::string lcs = str1.substr(endIndex - maxLength + 1, maxLength);
    
    return std::make_pair(lcs, dp);
}

void printLookupTable(const std::vector<std::vector<int>>& dp) {
    std::cout << "Lookup Table:\n";
    for (const auto& row : dp) {
        for (int val : row) {
            std::cout << val << " ";
        }
        std::cout << "\n";
    }
}

int main() {
    std::string str1 = "ABAB";
    std::string str2 = "BABA";
    
    std::pair<std::string, std::vector<std::vector<int>>> result = longestCommonSubstring(str1, str2);
    std::string lcs = result.first;
    std::vector<std::vector<int>> dp = result.second;
    
    std::cout << "Input strings: " << str1 << " and " << str2 << "\n";
    printLookupTable(dp);
    std::cout << "Longest Common Substring: " << lcs << "\n";
    std::cout << "Length: " << lcs.length() << "\n";
    
    return 0;
}